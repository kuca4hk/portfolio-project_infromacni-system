"""
Django settings for registry-office project.

Generated by 'django-admin startproject' using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import json
import os
from pathlib import Path
from typing import Optional
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

from decouple import config
import dataclasses
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


@dataclasses.dataclass
class Secrets:
    PROJECT_SECRET_KEY: str
    DB_URL: str
    KEYCLOAK_SERVER_URL: str
    KEYCLOAK_REALM: str
    KEYCLOAK_CLIENT_ID: str
    KEYCLOAK_CLIENT_SECRET: str



if not config("INSECURE_ENV_SECRETS", cast=bool, default=False):
    # by default, get secrets from docker secrets
    with open("/etc/secrets/registry-config.json") as secrets_file:
        SECRETS = Secrets(**json.loads(secrets_file.read()))
else:
    # locally, get secrets from env vars
    SECRETS = Secrets(
        PROJECT_SECRET_KEY=config("PROJECT_SECRET_KEY"),
        DB_URL=config("DB_URL"),
        KEYCLOAK_SERVER_URL=config("KEYCLOAK_SERVER_URL"),
        KEYCLOAK_REALM=config("KEYCLOAK_REALM"),
        KEYCLOAK_CLIENT_ID=config("KEYCLOAK_CLIENT_ID"),
        KEYCLOAK_CLIENT_SECRET=config("KEYCLOAK_CLIENT_SECRET"),
    )


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRETS.PROJECT_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
DEBUG_TOOLBAR = config("DEBUG_TOOLBAR", cast=bool, default=False)
ALLOW_ROBOTS = True


BASE_PROTOCOL = config("BASE_PROTOCOL", default="http") + "://"
BASE_URL = BASE_PROTOCOL + config("PROJECT_MAIN_DOMAIN", default="")
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="", cast=lambda v: [s.strip() for s in v.split(",")])


# Application definition

INSTALLED_APPS = [

    # 'registry-office.apps.users',
    # 'registry-office.apps.TodoDemo',
    'registry-office.apps.organizations',
    'registry-office.apps.users',
    'registry-office.apps.scholl_class',
    'registry-office.apps.ciselniky',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "rest_framework",
    "corsheaders",
    "drf_yasg2",
    "django_extensions",
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'registry-office.middleware.KeycloakMiddleware',
]

ROOT_URLCONF = 'registry-office.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'registry-office.wsgi.application'

# Exempt URIS
# For example: ['core/banks', 'swagger']
KEYCLOAK_EXEMPT_URIS = []
KEYCLOAK_CONFIG = {
    'KEYCLOAK_SERVER_URL': SECRETS.KEYCLOAK_SERVER_URL,
    'KEYCLOAK_REALM': SECRETS.KEYCLOAK_REALM,
    'KEYCLOAK_CLIENT_ID': SECRETS.KEYCLOAK_CLIENT_ID,
    'KEYCLOAK_CLIENT_SECRET_KEY': SECRETS.KEYCLOAK_CLIENT_SECRET,
}
# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(default=SECRETS.DB_URL, ssl_require=config("DB_SSL_REQUIRE", default=True, cast=bool))
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # "DEFAULT_AUTHENTICATION_CLASSES": [
    #     "rest_framework_simplejwt.authentication.JWTAuthentication",
    # ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10
}

# CORS_ORIGIN_WHITELIST = (
#     'http://localhost:3000',
# )
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = (
    "cache-control",
    "authorization",
    "x-requested-with",
    "content-type",
    "access-control-allow-origin",
)
CSRF_COOKIE_SECURE=True
CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS", default="", cast=lambda v: [s.strip() for s in v.split(",")])
# CORS_URLS_REGEX = r'^/api/.*$'
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGIN_REGEXES = config(
    "CORS_ALLOWED_ORIGIN_REGEXES", default=BASE_URL, cast=lambda v: [s.strip() for s in v.split(",")]
)
CORS_ORIGIN_ALLOW_ALL = True

CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="", cast=lambda v: [s.strip() for s in v.split(",")])

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "Token": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
        }
    },
}

SWAGGER_URL = config("SWAGGER_URL", default=BASE_URL + "/api/")

# LOGIN_URL=config("LOGIN_URL", default="/api-auth/login")

# sentry_sdk.init(
#     dsn = config("SENTRY_DSN"),
#     integrations=[
#         DjangoIntegration(),
#     ],
#
#     # Set traces_sample_rate to 1.0 to capture 100%
#     # of transactions for performance monitoring.
#     # We recommend adjusting this value in production.
#     traces_sample_rate=1.0,
#
#     # If you wish to associate users to errors (assuming you are using
#     # django.contrib.auth) you may enable sending PII data.
#     send_default_pii=True,
#     environment=config("SENTRY_ENVIRONMENT"),
# )